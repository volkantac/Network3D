'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _viewportMercatorProject = require('viewport-mercator-project');

var _viewportMercatorProject2 = _interopRequireDefault(_viewportMercatorProject);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var propTypes = {
  /** Event handling */
  captureScroll: _propTypes2.default.bool,
  // Stop map pan & rotate
  captureDrag: _propTypes2.default.bool,
  // Stop map click
  captureClick: _propTypes2.default.bool,
  // Stop map double click
  captureDoubleClick: _propTypes2.default.bool
}; // Copyright (c) 2015 Uber Technologies, Inc.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.


var defaultProps = {
  captureScroll: false,
  captureDrag: true,
  captureClick: true,
  captureDoubleClick: true
};

var contextTypes = {
  viewport: _propTypes2.default.instanceOf(_viewportMercatorProject2.default),
  isDragging: _propTypes2.default.bool,
  eventManager: _propTypes2.default.object
};

/*
 * PureComponent doesn't update when context changes.
 * The only way is to implement our own shouldComponentUpdate here. Considering
 * the parent component (StaticMap or InteractiveMap) is pure, and map re-render
 * is almost always triggered by a viewport change, we almost definitely need to
 * recalculate the marker's position when the parent re-renders.
 */

var BaseControl = function (_Component) {
  (0, _inherits3.default)(BaseControl, _Component);

  function BaseControl(props) {
    (0, _classCallCheck3.default)(this, BaseControl);

    var _this = (0, _possibleConstructorReturn3.default)(this, (BaseControl.__proto__ || (0, _getPrototypeOf2.default)(BaseControl)).call(this, props));

    _this._events = null;

    _this._onContainerLoad = _this._onContainerLoad.bind(_this);
    return _this;
  }

  (0, _createClass3.default)(BaseControl, [{
    key: '_onContainerLoad',
    value: function _onContainerLoad(ref) {
      var eventManager = this.context.eventManager;

      // Return early if no eventManager is found

      if (!eventManager) {
        return;
      }

      var events = this._events;

      // Remove all previously registered events
      if (events) {
        eventManager.off(events);
        events = null;
      }

      if (ref) {
        // container is mounted: register events for this element
        events = {
          wheel: this._onScroll.bind(this),
          panstart: this._onDrag.bind(this),
          click: this._onClick.bind(this),
          dblclick: this._onDoubleClick.bind(this)
        };

        eventManager.on(events, ref);
      }

      this._events = events;
    }
  }, {
    key: '_onScroll',
    value: function _onScroll(evt) {
      if (this.props.captureScroll) {
        evt.stopPropagation();
      }
    }
  }, {
    key: '_onDrag',
    value: function _onDrag(evt) {
      if (this.props.captureDrag) {
        evt.stopPropagation();
      }
    }
  }, {
    key: '_onClick',
    value: function _onClick(evt) {
      if (this.props.captureClick) {
        evt.stopPropagation();
      }
    }
  }, {
    key: '_onDoubleClick',
    value: function _onDoubleClick(evt) {
      if (this.props.captureDoubleClick) {
        evt.stopPropagation();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      return null;
    }
  }]);
  return BaseControl;
}(_react.Component);

exports.default = BaseControl;


BaseControl.propTypes = propTypes;
BaseControl.defaultProps = defaultProps;
BaseControl.contextTypes = contextTypes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21wb25lbnRzL2Jhc2UtY29udHJvbC5qcyJdLCJuYW1lcyI6WyJwcm9wVHlwZXMiLCJjYXB0dXJlU2Nyb2xsIiwiYm9vbCIsImNhcHR1cmVEcmFnIiwiY2FwdHVyZUNsaWNrIiwiY2FwdHVyZURvdWJsZUNsaWNrIiwiZGVmYXVsdFByb3BzIiwiY29udGV4dFR5cGVzIiwidmlld3BvcnQiLCJpbnN0YW5jZU9mIiwiaXNEcmFnZ2luZyIsImV2ZW50TWFuYWdlciIsIm9iamVjdCIsIkJhc2VDb250cm9sIiwicHJvcHMiLCJfZXZlbnRzIiwiX29uQ29udGFpbmVyTG9hZCIsImJpbmQiLCJyZWYiLCJjb250ZXh0IiwiZXZlbnRzIiwib2ZmIiwid2hlZWwiLCJfb25TY3JvbGwiLCJwYW5zdGFydCIsIl9vbkRyYWciLCJjbGljayIsIl9vbkNsaWNrIiwiZGJsY2xpY2siLCJfb25Eb3VibGVDbGljayIsIm9uIiwiZXZ0Iiwic3RvcFByb3BhZ2F0aW9uIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW1CQTs7QUFDQTs7OztBQUNBOzs7Ozs7QUFFQSxJQUFNQSxZQUFZO0FBQ2hCO0FBQ0FDLGlCQUFlLG9CQUFVQyxJQUZUO0FBR2hCO0FBQ0FDLGVBQWEsb0JBQVVELElBSlA7QUFLaEI7QUFDQUUsZ0JBQWMsb0JBQVVGLElBTlI7QUFPaEI7QUFDQUcsc0JBQW9CLG9CQUFVSDtBQVJkLENBQWxCLEMsQ0F2QkE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQWdCQSxJQUFNSSxlQUFlO0FBQ25CTCxpQkFBZSxLQURJO0FBRW5CRSxlQUFhLElBRk07QUFHbkJDLGdCQUFjLElBSEs7QUFJbkJDLHNCQUFvQjtBQUpELENBQXJCOztBQU9BLElBQU1FLGVBQWU7QUFDbkJDLFlBQVUsb0JBQVVDLFVBQVYsbUNBRFM7QUFFbkJDLGNBQVksb0JBQVVSLElBRkg7QUFHbkJTLGdCQUFjLG9CQUFVQztBQUhMLENBQXJCOztBQU1BOzs7Ozs7OztJQU9xQkMsVzs7O0FBRW5CLHVCQUFZQyxLQUFaLEVBQW1CO0FBQUE7O0FBQUEsZ0pBQ1hBLEtBRFc7O0FBR2pCLFVBQUtDLE9BQUwsR0FBZSxJQUFmOztBQUVBLFVBQUtDLGdCQUFMLEdBQXdCLE1BQUtBLGdCQUFMLENBQXNCQyxJQUF0QixPQUF4QjtBQUxpQjtBQU1sQjs7OztxQ0FFZ0JDLEcsRUFBSztBQUFBLFVBQ2JQLFlBRGEsR0FDRyxLQUFLUSxPQURSLENBQ2JSLFlBRGE7O0FBR3BCOztBQUNBLFVBQUksQ0FBQ0EsWUFBTCxFQUFtQjtBQUNqQjtBQUNEOztBQUVELFVBQUlTLFNBQVMsS0FBS0wsT0FBbEI7O0FBRUE7QUFDQSxVQUFJSyxNQUFKLEVBQVk7QUFDVlQscUJBQWFVLEdBQWIsQ0FBaUJELE1BQWpCO0FBQ0FBLGlCQUFTLElBQVQ7QUFDRDs7QUFFRCxVQUFJRixHQUFKLEVBQVM7QUFDUDtBQUNBRSxpQkFBUztBQUNQRSxpQkFBTyxLQUFLQyxTQUFMLENBQWVOLElBQWYsQ0FBb0IsSUFBcEIsQ0FEQTtBQUVQTyxvQkFBVSxLQUFLQyxPQUFMLENBQWFSLElBQWIsQ0FBa0IsSUFBbEIsQ0FGSDtBQUdQUyxpQkFBTyxLQUFLQyxRQUFMLENBQWNWLElBQWQsQ0FBbUIsSUFBbkIsQ0FIQTtBQUlQVyxvQkFBVSxLQUFLQyxjQUFMLENBQW9CWixJQUFwQixDQUF5QixJQUF6QjtBQUpILFNBQVQ7O0FBT0FOLHFCQUFhbUIsRUFBYixDQUFnQlYsTUFBaEIsRUFBd0JGLEdBQXhCO0FBQ0Q7O0FBRUQsV0FBS0gsT0FBTCxHQUFlSyxNQUFmO0FBQ0Q7Ozs4QkFFU1csRyxFQUFLO0FBQ2IsVUFBSSxLQUFLakIsS0FBTCxDQUFXYixhQUFmLEVBQThCO0FBQzVCOEIsWUFBSUMsZUFBSjtBQUNEO0FBQ0Y7Ozs0QkFFT0QsRyxFQUFLO0FBQ1gsVUFBSSxLQUFLakIsS0FBTCxDQUFXWCxXQUFmLEVBQTRCO0FBQzFCNEIsWUFBSUMsZUFBSjtBQUNEO0FBQ0Y7Ozs2QkFFUUQsRyxFQUFLO0FBQ1osVUFBSSxLQUFLakIsS0FBTCxDQUFXVixZQUFmLEVBQTZCO0FBQzNCMkIsWUFBSUMsZUFBSjtBQUNEO0FBQ0Y7OzttQ0FFY0QsRyxFQUFLO0FBQ2xCLFVBQUksS0FBS2pCLEtBQUwsQ0FBV1Qsa0JBQWYsRUFBbUM7QUFDakMwQixZQUFJQyxlQUFKO0FBQ0Q7QUFDRjs7OzZCQUVRO0FBQ1AsYUFBTyxJQUFQO0FBQ0Q7Ozs7O2tCQW5Fa0JuQixXOzs7QUF1RXJCQSxZQUFZYixTQUFaLEdBQXdCQSxTQUF4QjtBQUNBYSxZQUFZUCxZQUFaLEdBQTJCQSxZQUEzQjtBQUNBTyxZQUFZTixZQUFaLEdBQTJCQSxZQUEzQiIsImZpbGUiOiJiYXNlLWNvbnRyb2wuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMTUgVWJlciBUZWNobm9sb2dpZXMsIEluYy5cblxuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuaW1wb3J0IHtDb21wb25lbnR9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgV2ViTWVyY2F0b3JWaWV3cG9ydCBmcm9tICd2aWV3cG9ydC1tZXJjYXRvci1wcm9qZWN0JztcblxuY29uc3QgcHJvcFR5cGVzID0ge1xuICAvKiogRXZlbnQgaGFuZGxpbmcgKi9cbiAgY2FwdHVyZVNjcm9sbDogUHJvcFR5cGVzLmJvb2wsXG4gIC8vIFN0b3AgbWFwIHBhbiAmIHJvdGF0ZVxuICBjYXB0dXJlRHJhZzogUHJvcFR5cGVzLmJvb2wsXG4gIC8vIFN0b3AgbWFwIGNsaWNrXG4gIGNhcHR1cmVDbGljazogUHJvcFR5cGVzLmJvb2wsXG4gIC8vIFN0b3AgbWFwIGRvdWJsZSBjbGlja1xuICBjYXB0dXJlRG91YmxlQ2xpY2s6IFByb3BUeXBlcy5ib29sXG59O1xuXG5jb25zdCBkZWZhdWx0UHJvcHMgPSB7XG4gIGNhcHR1cmVTY3JvbGw6IGZhbHNlLFxuICBjYXB0dXJlRHJhZzogdHJ1ZSxcbiAgY2FwdHVyZUNsaWNrOiB0cnVlLFxuICBjYXB0dXJlRG91YmxlQ2xpY2s6IHRydWVcbn07XG5cbmNvbnN0IGNvbnRleHRUeXBlcyA9IHtcbiAgdmlld3BvcnQ6IFByb3BUeXBlcy5pbnN0YW5jZU9mKFdlYk1lcmNhdG9yVmlld3BvcnQpLFxuICBpc0RyYWdnaW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgZXZlbnRNYW5hZ2VyOiBQcm9wVHlwZXMub2JqZWN0XG59O1xuXG4vKlxuICogUHVyZUNvbXBvbmVudCBkb2Vzbid0IHVwZGF0ZSB3aGVuIGNvbnRleHQgY2hhbmdlcy5cbiAqIFRoZSBvbmx5IHdheSBpcyB0byBpbXBsZW1lbnQgb3VyIG93biBzaG91bGRDb21wb25lbnRVcGRhdGUgaGVyZS4gQ29uc2lkZXJpbmdcbiAqIHRoZSBwYXJlbnQgY29tcG9uZW50IChTdGF0aWNNYXAgb3IgSW50ZXJhY3RpdmVNYXApIGlzIHB1cmUsIGFuZCBtYXAgcmUtcmVuZGVyXG4gKiBpcyBhbG1vc3QgYWx3YXlzIHRyaWdnZXJlZCBieSBhIHZpZXdwb3J0IGNoYW5nZSwgd2UgYWxtb3N0IGRlZmluaXRlbHkgbmVlZCB0b1xuICogcmVjYWxjdWxhdGUgdGhlIG1hcmtlcidzIHBvc2l0aW9uIHdoZW4gdGhlIHBhcmVudCByZS1yZW5kZXJzLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCYXNlQ29udHJvbCBleHRlbmRzIENvbXBvbmVudCB7XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG5cbiAgICB0aGlzLl9ldmVudHMgPSBudWxsO1xuXG4gICAgdGhpcy5fb25Db250YWluZXJMb2FkID0gdGhpcy5fb25Db250YWluZXJMb2FkLmJpbmQodGhpcyk7XG4gIH1cblxuICBfb25Db250YWluZXJMb2FkKHJlZikge1xuICAgIGNvbnN0IHtldmVudE1hbmFnZXJ9ID0gdGhpcy5jb250ZXh0O1xuXG4gICAgLy8gUmV0dXJuIGVhcmx5IGlmIG5vIGV2ZW50TWFuYWdlciBpcyBmb3VuZFxuICAgIGlmICghZXZlbnRNYW5hZ2VyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcblxuICAgIC8vIFJlbW92ZSBhbGwgcHJldmlvdXNseSByZWdpc3RlcmVkIGV2ZW50c1xuICAgIGlmIChldmVudHMpIHtcbiAgICAgIGV2ZW50TWFuYWdlci5vZmYoZXZlbnRzKTtcbiAgICAgIGV2ZW50cyA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKHJlZikge1xuICAgICAgLy8gY29udGFpbmVyIGlzIG1vdW50ZWQ6IHJlZ2lzdGVyIGV2ZW50cyBmb3IgdGhpcyBlbGVtZW50XG4gICAgICBldmVudHMgPSB7XG4gICAgICAgIHdoZWVsOiB0aGlzLl9vblNjcm9sbC5iaW5kKHRoaXMpLFxuICAgICAgICBwYW5zdGFydDogdGhpcy5fb25EcmFnLmJpbmQodGhpcyksXG4gICAgICAgIGNsaWNrOiB0aGlzLl9vbkNsaWNrLmJpbmQodGhpcyksXG4gICAgICAgIGRibGNsaWNrOiB0aGlzLl9vbkRvdWJsZUNsaWNrLmJpbmQodGhpcylcbiAgICAgIH07XG5cbiAgICAgIGV2ZW50TWFuYWdlci5vbihldmVudHMsIHJlZik7XG4gICAgfVxuXG4gICAgdGhpcy5fZXZlbnRzID0gZXZlbnRzO1xuICB9XG5cbiAgX29uU2Nyb2xsKGV2dCkge1xuICAgIGlmICh0aGlzLnByb3BzLmNhcHR1cmVTY3JvbGwpIHtcbiAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9XG4gIH1cblxuICBfb25EcmFnKGV2dCkge1xuICAgIGlmICh0aGlzLnByb3BzLmNhcHR1cmVEcmFnKSB7XG4gICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfVxuICB9XG5cbiAgX29uQ2xpY2soZXZ0KSB7XG4gICAgaWYgKHRoaXMucHJvcHMuY2FwdHVyZUNsaWNrKSB7XG4gICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfVxuICB9XG5cbiAgX29uRG91YmxlQ2xpY2soZXZ0KSB7XG4gICAgaWYgKHRoaXMucHJvcHMuY2FwdHVyZURvdWJsZUNsaWNrKSB7XG4gICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbn1cblxuQmFzZUNvbnRyb2wucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuQmFzZUNvbnRyb2wuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuQmFzZUNvbnRyb2wuY29udGV4dFR5cGVzID0gY29udGV4dFR5cGVzO1xuIl19