'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _react = require('react');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _baseControl = require('./base-control');

var _baseControl2 = _interopRequireDefault(_baseControl);

var _dynamicPosition = require('../utils/dynamic-position');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright (c) 2015 Uber Technologies, Inc.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
var propTypes = (0, _assign2.default)({}, _baseControl2.default.propTypes, {
  // Custom className
  className: _propTypes2.default.string,
  // Longitude of the anchor point
  longitude: _propTypes2.default.number.isRequired,
  // Latitude of the anchor point
  latitude: _propTypes2.default.number.isRequired,
  // Offset from the left
  offsetLeft: _propTypes2.default.number,
  // Offset from the top
  offsetTop: _propTypes2.default.number,
  // Size of the tip
  tipSize: _propTypes2.default.number,
  // Whether to show close button
  closeButton: _propTypes2.default.bool,
  // Whether to close on click
  closeOnClick: _propTypes2.default.bool,
  // The popup's location relative to the coordinate
  anchor: _propTypes2.default.oneOf((0, _keys2.default)(_dynamicPosition.ANCHOR_POSITION)),
  // Whether the popup anchor should be auto-adjusted to fit within the container
  dynamicPosition: _propTypes2.default.bool,
  // Callback when component is closed
  onClose: _propTypes2.default.func
});

var defaultProps = (0, _assign2.default)({}, _baseControl2.default.defaultProps, {
  className: '',
  offsetLeft: 0,
  offsetTop: 0,
  tipSize: 10,
  anchor: 'bottom',
  dynamicPosition: true,
  closeButton: true,
  closeOnClick: true,
  onClose: function onClose() {}
});

/*
 * PureComponent doesn't update when context changes.
 * The only way is to implement our own shouldComponentUpdate here. Considering
 * the parent component (StaticMap or InteractiveMap) is pure, and map re-render
 * is almost always triggered by a viewport change, we almost definitely need to
 * recalculate the popup's position when the parent re-renders.
 */

var Popup = function (_BaseControl) {
  (0, _inherits3.default)(Popup, _BaseControl);

  function Popup(props) {
    (0, _classCallCheck3.default)(this, Popup);

    var _this = (0, _possibleConstructorReturn3.default)(this, (Popup.__proto__ || (0, _getPrototypeOf2.default)(Popup)).call(this, props));

    _this._getPosition = _this._getPosition.bind(_this);
    _this._onClose = _this._onClose.bind(_this);
    _this._contentLoaded = _this._contentLoaded.bind(_this);
    _this._renderTip = _this._renderTip.bind(_this);
    _this._renderContent = _this._renderContent.bind(_this);

    _this._closeOnClick = false;
    return _this;
  }

  (0, _createClass3.default)(Popup, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      // Container just got a size, re-calculate position
      this.forceUpdate();
    }
  }, {
    key: '_getPosition',
    value: function _getPosition(x, y) {
      var viewport = this.context.viewport;
      var _props = this.props,
          anchor = _props.anchor,
          dynamicPosition = _props.dynamicPosition,
          tipSize = _props.tipSize;


      if (this._content) {
        return dynamicPosition ? (0, _dynamicPosition.getDynamicPosition)({
          x: x, y: y, anchor: anchor,
          padding: tipSize,
          width: viewport.width,
          height: viewport.height,
          selfWidth: this._content.clientWidth,
          selfHeight: this._content.clientHeight
        }) : anchor;
      }

      return anchor;
    }

    /*
     * Hack -
     * React's `onClick` is called before mjolnir.js' `click` event (aka `tap` from hammer.js)
     * which has a configurable delay.
     * If we close the popup on the React event, by the time `click` fires, this component will
     * have been unmounted, thus `captureClick` will not work.
     * Instead, we flag the popup as closed on the React event, and actually close it on the hammer.js
     * event.
     */

  }, {
    key: '_onClick',
    value: function _onClick(evt) {
      if (this.props.captureClick) {
        evt.stopPropagation();
      }

      if (this.props.closeOnClick || this._closeOnClick) {
        this.props.onClose();
      }
    }
  }, {
    key: '_onClose',
    value: function _onClose() {
      this._closeOnClick = true;
    }
  }, {
    key: '_contentLoaded',
    value: function _contentLoaded(ref) {
      this._content = ref;
    }
  }, {
    key: '_renderTip',
    value: function _renderTip() {
      var tipSize = this.props.tipSize;


      return (0, _react.createElement)('div', {
        key: 'tip',
        className: 'mapboxgl-popup-tip',
        style: { borderWidth: tipSize }
      });
    }
  }, {
    key: '_renderContent',
    value: function _renderContent() {
      var _props2 = this.props,
          closeButton = _props2.closeButton,
          children = _props2.children;

      return (0, _react.createElement)('div', {
        key: 'content',
        ref: this._contentLoaded,
        className: 'mapboxgl-popup-content'
      }, [closeButton && (0, _react.createElement)('button', {
        key: 'close-button',
        className: 'mapboxgl-popup-close-button',
        type: 'button',
        onClick: this._onClose
      }, 'Ã—'), children]);
    }
  }, {
    key: 'render',
    value: function render() {
      var _props3 = this.props,
          className = _props3.className,
          longitude = _props3.longitude,
          latitude = _props3.latitude,
          offsetLeft = _props3.offsetLeft,
          offsetTop = _props3.offsetTop;

      var _context$viewport$pro = this.context.viewport.project([longitude, latitude]),
          _context$viewport$pro2 = (0, _slicedToArray3.default)(_context$viewport$pro, 2),
          x = _context$viewport$pro2[0],
          y = _context$viewport$pro2[1];

      var positionType = this._getPosition(x, y);
      var anchorPosition = _dynamicPosition.ANCHOR_POSITION[positionType];

      var containerStyle = {
        position: 'absolute',
        left: x + offsetLeft,
        top: y + offsetTop,
        transform: 'translate(' + -anchorPosition.x * 100 + '%, ' + -anchorPosition.y * 100 + '%)'
      };

      return (0, _react.createElement)('div', {
        className: 'mapboxgl-popup mapboxgl-popup-anchor-' + positionType + ' ' + className,
        style: containerStyle,
        ref: this._onContainerLoad
      }, [this._renderTip(), this._renderContent()]);
    }
  }]);
  return Popup;
}(_baseControl2.default);

exports.default = Popup;


Popup.displayName = 'Popup';
Popup.propTypes = propTypes;
Popup.defaultProps = defaultProps;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21wb25lbnRzL3BvcHVwLmpzIl0sIm5hbWVzIjpbInByb3BUeXBlcyIsImNsYXNzTmFtZSIsInN0cmluZyIsImxvbmdpdHVkZSIsIm51bWJlciIsImlzUmVxdWlyZWQiLCJsYXRpdHVkZSIsIm9mZnNldExlZnQiLCJvZmZzZXRUb3AiLCJ0aXBTaXplIiwiY2xvc2VCdXR0b24iLCJib29sIiwiY2xvc2VPbkNsaWNrIiwiYW5jaG9yIiwib25lT2YiLCJkeW5hbWljUG9zaXRpb24iLCJvbkNsb3NlIiwiZnVuYyIsImRlZmF1bHRQcm9wcyIsIlBvcHVwIiwicHJvcHMiLCJfZ2V0UG9zaXRpb24iLCJiaW5kIiwiX29uQ2xvc2UiLCJfY29udGVudExvYWRlZCIsIl9yZW5kZXJUaXAiLCJfcmVuZGVyQ29udGVudCIsIl9jbG9zZU9uQ2xpY2siLCJmb3JjZVVwZGF0ZSIsIngiLCJ5Iiwidmlld3BvcnQiLCJjb250ZXh0IiwiX2NvbnRlbnQiLCJwYWRkaW5nIiwid2lkdGgiLCJoZWlnaHQiLCJzZWxmV2lkdGgiLCJjbGllbnRXaWR0aCIsInNlbGZIZWlnaHQiLCJjbGllbnRIZWlnaHQiLCJldnQiLCJjYXB0dXJlQ2xpY2siLCJzdG9wUHJvcGFnYXRpb24iLCJyZWYiLCJrZXkiLCJzdHlsZSIsImJvcmRlcldpZHRoIiwiY2hpbGRyZW4iLCJ0eXBlIiwib25DbGljayIsInByb2plY3QiLCJwb3NpdGlvblR5cGUiLCJhbmNob3JQb3NpdGlvbiIsImNvbnRhaW5lclN0eWxlIiwicG9zaXRpb24iLCJsZWZ0IiwidG9wIiwidHJhbnNmb3JtIiwiX29uQ29udGFpbmVyTG9hZCIsImRpc3BsYXlOYW1lIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW1CQTs7QUFDQTs7OztBQUNBOzs7O0FBRUE7Ozs7QUF2QkE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtB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Q0FISDs7QUFLUCxVQUFNc0IsZUFBZSxLQUFLL0IsWUFBTCxDQUFrQlEsQ0FBbEIsRUFBcUJDLENBQXJCLENBQXJCO0FBQ0EsVUFBTXVCLGlCQUFpQixpQ0FBZ0JELFlBQWhCLENBQXZCOztBQUVBLFVBQU1FLGlCQUFpQjtBQUNyQkMsa0JBQVUsVUFEVztBQUVyQkMsY0FBTTNCLElBQUl0QixVQUZXO0FBR3JCa0QsYUFBSzNCLElBQUl0QixTQUhZO0FBSXJCa0Qsa0NBQXdCLENBQUNMLGVBQWV4QixDQUFoQixHQUFvQixHQUE1QyxXQUFxRCxDQUFDd0IsZUFBZXZCLENBQWhCLEdBQW9CLEdBQXpFO0FBSnFCLE9BQXZCOztBQU9BLGFBQU8sMEJBQWMsS0FBZCxFQUFxQjtBQUMxQjdCLDZEQUFtRG1ELFlBQW5ELFNBQW1FbkQsU0FEekM7QUFFMUI2QyxlQUFPUSxjQUZtQjtBQUcxQlYsYUFBSyxLQUFLZTtBQUhnQixPQUFyQixFQUlKLENBQ0QsS0FBS2xDLFVBQUwsRUFEQyxFQUVELEtBQUtDLGNBQUwsRUFGQyxDQUpJLENBQVA7QUFRRDs7Ozs7a0JBbEhrQlAsSzs7O0FBc0hyQkEsTUFBTXlDLFdBQU4sR0FBb0IsT0FBcEI7QUFDQXpDLE1BQU1uQixTQUFOLEdBQWtCQSxTQUFsQjtBQUNBbUIsTUFBTUQsWUFBTixHQUFxQkEsWUFBckIiLCJmaWxlIjoicG9wdXAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMTUgVWJlciBUZWNobm9sb2dpZXMsIEluYy5cblxuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuaW1wb3J0IHtjcmVhdGVFbGVtZW50fSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IEJhc2VDb250cm9sIGZyb20gJy4vYmFzZS1jb250cm9sJztcblxuaW1wb3J0IHtnZXREeW5hbWljUG9zaXRpb24sIEFOQ0hPUl9QT1NJVElPTn0gZnJvbSAnLi4vdXRpbHMvZHluYW1pYy1wb3NpdGlvbic7XG5cbmNvbnN0IHByb3BUeXBlcyA9IE9iamVjdC5hc3NpZ24oe30sIEJhc2VDb250cm9sLnByb3BUeXBlcywge1xuICAvLyBDdXN0b20gY2xhc3NOYW1lXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLy8gTG9uZ2l0dWRlIG9mIHRoZSBhbmNob3IgcG9pbnRcbiAgbG9uZ2l0dWRlOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG4gIC8vIExhdGl0dWRlIG9mIHRoZSBhbmNob3IgcG9pbnRcbiAgbGF0aXR1ZGU6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgLy8gT2Zmc2V0IGZyb20gdGhlIGxlZnRcbiAgb2Zmc2V0TGVmdDogUHJvcFR5cGVzLm51bWJlcixcbiAgLy8gT2Zmc2V0IGZyb20gdGhlIHRvcFxuICBvZmZzZXRUb3A6IFByb3BUeXBlcy5udW1iZXIsXG4gIC8vIFNpemUgb2YgdGhlIHRpcFxuICB0aXBTaXplOiBQcm9wVHlwZXMubnVtYmVyLFxuICAvLyBXaGV0aGVyIHRvIHNob3cgY2xvc2UgYnV0dG9uXG4gIGNsb3NlQnV0dG9uOiBQcm9wVHlwZXMuYm9vbCxcbiAgLy8gV2hldGhlciB0byBjbG9zZSBvbiBjbGlja1xuICBjbG9zZU9uQ2xpY2s6IFByb3BUeXBlcy5ib29sLFxuICAvLyBUaGUgcG9wdXAncyBsb2NhdGlvbiByZWxhdGl2ZSB0byB0aGUgY29vcmRpbmF0ZVxuICBhbmNob3I6IFByb3BUeXBlcy5vbmVPZihPYmplY3Qua2V5cyhBTkNIT1JfUE9TSVRJT04pKSxcbiAgLy8gV2hldGhlciB0aGUgcG9wdXAgYW5jaG9yIHNob3VsZCBiZSBhdXRvLWFkanVzdGVkIHRvIGZpdCB3aXRoaW4gdGhlIGNvbnRhaW5lclxuICBkeW5hbWljUG9zaXRpb246IFByb3BUeXBlcy5ib29sLFxuICAvLyBDYWxsYmFjayB3aGVuIGNvbXBvbmVudCBpcyBjbG9zZWRcbiAgb25DbG9zZTogUHJvcFR5cGVzLmZ1bmNcbn0pO1xuXG5jb25zdCBkZWZhdWx0UHJvcHMgPSBPYmplY3QuYXNzaWduKHt9LCBCYXNlQ29udHJvbC5kZWZhdWx0UHJvcHMsIHtcbiAgY2xhc3NOYW1lOiAnJyxcbiAgb2Zmc2V0TGVmdDogMCxcbiAgb2Zmc2V0VG9wOiAwLFxuICB0aXBTaXplOiAxMCxcbiAgYW5jaG9yOiAnYm90dG9tJyxcbiAgZHluYW1pY1Bvc2l0aW9uOiB0cnVlLFxuICBjbG9zZUJ1dHRvbjogdHJ1ZSxcbiAgY2xvc2VPbkNsaWNrOiB0cnVlLFxuICBvbkNsb3NlOiAoKSA9PiB7fVxufSk7XG5cbi8qXG4gKiBQdXJlQ29tcG9uZW50IGRvZXNuJ3QgdXBkYXRlIHdoZW4gY29udGV4dCBjaGFuZ2VzLlxuICogVGhlIG9ubHkgd2F5IGlzIHRvIGltcGxlbWVudCBvdXIgb3duIHNob3VsZENvbXBvbmVudFVwZGF0ZSBoZXJlLiBDb25zaWRlcmluZ1xuICogdGhlIHBhcmVudCBjb21wb25lbnQgKFN0YXRpY01hcCBvciBJbnRlcmFjdGl2ZU1hcCkgaXMgcHVyZSwgYW5kIG1hcCByZS1yZW5kZXJcbiAqIGlzIGFsbW9zdCBhbHdheXMgdHJpZ2dlcmVkIGJ5IGEgdmlld3BvcnQgY2hhbmdlLCB3ZSBhbG1vc3QgZGVmaW5pdGVseSBuZWVkIHRvXG4gKiByZWNhbGN1bGF0ZSB0aGUgcG9wdXAncyBwb3NpdGlvbiB3aGVuIHRoZSBwYXJlbnQgcmUtcmVuZGVycy5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXAgZXh0ZW5kcyBCYXNlQ29udHJvbCB7XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG5cbiAgICB0aGlzLl9nZXRQb3NpdGlvbiA9IHRoaXMuX2dldFBvc2l0aW9uLmJpbmQodGhpcyk7XG4gICAgdGhpcy5fb25DbG9zZSA9IHRoaXMuX29uQ2xvc2UuYmluZCh0aGlzKTtcbiAgICB0aGlzLl9jb250ZW50TG9hZGVkID0gdGhpcy5fY29udGVudExvYWRlZC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuX3JlbmRlclRpcCA9IHRoaXMuX3JlbmRlclRpcC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuX3JlbmRlckNvbnRlbnQgPSB0aGlzLl9yZW5kZXJDb250ZW50LmJpbmQodGhpcyk7XG5cbiAgICB0aGlzLl9jbG9zZU9uQ2xpY2sgPSBmYWxzZTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIC8vIENvbnRhaW5lciBqdXN0IGdvdCBhIHNpemUsIHJlLWNhbGN1bGF0ZSBwb3NpdGlvblxuICAgIHRoaXMuZm9yY2VVcGRhdGUoKTtcbiAgfVxuXG4gIF9nZXRQb3NpdGlvbih4LCB5KSB7XG4gICAgY29uc3Qge3ZpZXdwb3J0fSA9IHRoaXMuY29udGV4dDtcbiAgICBjb25zdCB7YW5jaG9yLCBkeW5hbWljUG9zaXRpb24sIHRpcFNpemV9ID0gdGhpcy5wcm9wcztcblxuICAgIGlmICh0aGlzLl9jb250ZW50KSB7XG4gICAgICByZXR1cm4gZHluYW1pY1Bvc2l0aW9uID8gZ2V0RHluYW1pY1Bvc2l0aW9uKHtcbiAgICAgICAgeCwgeSwgYW5jaG9yLFxuICAgICAgICBwYWRkaW5nOiB0aXBTaXplLFxuICAgICAgICB3aWR0aDogdmlld3BvcnQud2lkdGgsXG4gICAgICAgIGhlaWdodDogdmlld3BvcnQuaGVpZ2h0LFxuICAgICAgICBzZWxmV2lkdGg6IHRoaXMuX2NvbnRlbnQuY2xpZW50V2lkdGgsXG4gICAgICAgIHNlbGZIZWlnaHQ6IHRoaXMuX2NvbnRlbnQuY2xpZW50SGVpZ2h0XG4gICAgICB9KSA6IGFuY2hvcjtcbiAgICB9XG5cbiAgICByZXR1cm4gYW5jaG9yO1xuICB9XG5cbiAgLypcbiAgICogSGFjayAtXG4gICAqIFJlYWN0J3MgYG9uQ2xpY2tgIGlzIGNhbGxlZCBiZWZvcmUgbWpvbG5pci5qcycgYGNsaWNrYCBldmVudCAoYWthIGB0YXBgIGZyb20gaGFtbWVyLmpzKVxuICAgKiB3aGljaCBoYXMgYSBjb25maWd1cmFibGUgZGVsYXkuXG4gICAqIElmIHdlIGNsb3NlIHRoZSBwb3B1cCBvbiB0aGUgUmVhY3QgZXZlbnQsIGJ5IHRoZSB0aW1lIGBjbGlja2AgZmlyZXMsIHRoaXMgY29tcG9uZW50IHdpbGxcbiAgICogaGF2ZSBiZWVuIHVubW91bnRlZCwgdGh1cyBgY2FwdHVyZUNsaWNrYCB3aWxsIG5vdCB3b3JrLlxuICAgKiBJbnN0ZWFkLCB3ZSBmbGFnIHRoZSBwb3B1cCBhcyBjbG9zZWQgb24gdGhlIFJlYWN0IGV2ZW50LCBhbmQgYWN0dWFsbHkgY2xvc2UgaXQgb24gdGhlIGhhbW1lci5qc1xuICAgKiBldmVudC5cbiAgICovXG4gIF9vbkNsaWNrKGV2dCkge1xuICAgIGlmICh0aGlzLnByb3BzLmNhcHR1cmVDbGljaykge1xuICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnByb3BzLmNsb3NlT25DbGljayB8fCB0aGlzLl9jbG9zZU9uQ2xpY2spIHtcbiAgICAgIHRoaXMucHJvcHMub25DbG9zZSgpO1xuICAgIH1cbiAgfVxuXG4gIF9vbkNsb3NlKCkge1xuICAgIHRoaXMuX2Nsb3NlT25DbGljayA9IHRydWU7XG4gIH1cblxuICBfY29udGVudExvYWRlZChyZWYpIHtcbiAgICB0aGlzLl9jb250ZW50ID0gcmVmO1xuICB9XG5cbiAgX3JlbmRlclRpcCgpIHtcbiAgICBjb25zdCB7dGlwU2l6ZX0gPSB0aGlzLnByb3BzO1xuXG4gICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHtcbiAgICAgIGtleTogJ3RpcCcsXG4gICAgICBjbGFzc05hbWU6ICdtYXBib3hnbC1wb3B1cC10aXAnLFxuICAgICAgc3R5bGU6IHtib3JkZXJXaWR0aDogdGlwU2l6ZX1cbiAgICB9KTtcbiAgfVxuXG4gIF9yZW5kZXJDb250ZW50KCkge1xuICAgIGNvbnN0IHtjbG9zZUJ1dHRvbiwgY2hpbGRyZW59ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4gY3JlYXRlRWxlbWVudCgnZGl2Jywge1xuICAgICAga2V5OiAnY29udGVudCcsXG4gICAgICByZWY6IHRoaXMuX2NvbnRlbnRMb2FkZWQsXG4gICAgICBjbGFzc05hbWU6ICdtYXBib3hnbC1wb3B1cC1jb250ZW50J1xuICAgIH0sIFtcbiAgICAgIGNsb3NlQnV0dG9uICYmIGNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicsIHtcbiAgICAgICAga2V5OiAnY2xvc2UtYnV0dG9uJyxcbiAgICAgICAgY2xhc3NOYW1lOiAnbWFwYm94Z2wtcG9wdXAtY2xvc2UtYnV0dG9uJyxcbiAgICAgICAgdHlwZTogJ2J1dHRvbicsXG4gICAgICAgIG9uQ2xpY2s6IHRoaXMuX29uQ2xvc2VcbiAgICAgIH0sICfDlycpLFxuICAgICAgY2hpbGRyZW5cbiAgICBdKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7Y2xhc3NOYW1lLCBsb25naXR1ZGUsIGxhdGl0dWRlLCBvZmZzZXRMZWZ0LCBvZmZzZXRUb3B9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IFt4LCB5XSA9IHRoaXMuY29udGV4dC52aWV3cG9ydC5wcm9qZWN0KFtsb25naXR1ZGUsIGxhdGl0dWRlXSk7XG5cbiAgICBjb25zdCBwb3NpdGlvblR5cGUgPSB0aGlzLl9nZXRQb3NpdGlvbih4LCB5KTtcbiAgICBjb25zdCBhbmNob3JQb3NpdGlvbiA9IEFOQ0hPUl9QT1NJVElPTltwb3NpdGlvblR5cGVdO1xuXG4gICAgY29uc3QgY29udGFpbmVyU3R5bGUgPSB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIGxlZnQ6IHggKyBvZmZzZXRMZWZ0LFxuICAgICAgdG9wOiB5ICsgb2Zmc2V0VG9wLFxuICAgICAgdHJhbnNmb3JtOiBgdHJhbnNsYXRlKCR7LWFuY2hvclBvc2l0aW9uLnggKiAxMDB9JSwgJHstYW5jaG9yUG9zaXRpb24ueSAqIDEwMH0lKWBcbiAgICB9O1xuXG4gICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHtcbiAgICAgIGNsYXNzTmFtZTogYG1hcGJveGdsLXBvcHVwIG1hcGJveGdsLXBvcHVwLWFuY2hvci0ke3Bvc2l0aW9uVHlwZX0gJHtjbGFzc05hbWV9YCxcbiAgICAgIHN0eWxlOiBjb250YWluZXJTdHlsZSxcbiAgICAgIHJlZjogdGhpcy5fb25Db250YWluZXJMb2FkXG4gICAgfSwgW1xuICAgICAgdGhpcy5fcmVuZGVyVGlwKCksXG4gICAgICB0aGlzLl9yZW5kZXJDb250ZW50KClcbiAgICBdKTtcbiAgfVxuXG59XG5cblBvcHVwLmRpc3BsYXlOYW1lID0gJ1BvcHVwJztcblBvcHVwLnByb3BUeXBlcyA9IHByb3BUeXBlcztcblBvcHVwLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbiJdfQ==