var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Copyright (c) 2015 Uber Technologies, Inc.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
import { Component } from 'react';
import PropTypes from 'prop-types';
import WebMercatorViewport from 'viewport-mercator-project';

var propTypes = {
  /** Event handling */
  captureScroll: PropTypes.bool,
  // Stop map pan & rotate
  captureDrag: PropTypes.bool,
  // Stop map click
  captureClick: PropTypes.bool,
  // Stop map double click
  captureDoubleClick: PropTypes.bool
};

var defaultProps = {
  captureScroll: false,
  captureDrag: true,
  captureClick: true,
  captureDoubleClick: true
};

var contextTypes = {
  viewport: PropTypes.instanceOf(WebMercatorViewport),
  isDragging: PropTypes.bool,
  eventManager: PropTypes.object
};

/*
 * PureComponent doesn't update when context changes.
 * The only way is to implement our own shouldComponentUpdate here. Considering
 * the parent component (StaticMap or InteractiveMap) is pure, and map re-render
 * is almost always triggered by a viewport change, we almost definitely need to
 * recalculate the marker's position when the parent re-renders.
 */

var BaseControl = function (_Component) {
  _inherits(BaseControl, _Component);

  function BaseControl(props) {
    _classCallCheck(this, BaseControl);

    var _this = _possibleConstructorReturn(this, (BaseControl.__proto__ || Object.getPrototypeOf(BaseControl)).call(this, props));

    _this._events = null;

    _this._onContainerLoad = _this._onContainerLoad.bind(_this);
    return _this;
  }

  _createClass(BaseControl, [{
    key: '_onContainerLoad',
    value: function _onContainerLoad(ref) {
      var eventManager = this.context.eventManager;

      // Return early if no eventManager is found

      if (!eventManager) {
        return;
      }

      var events = this._events;

      // Remove all previously registered events
      if (events) {
        eventManager.off(events);
        events = null;
      }

      if (ref) {
        // container is mounted: register events for this element
        events = {
          wheel: this._onScroll.bind(this),
          panstart: this._onDrag.bind(this),
          click: this._onClick.bind(this),
          dblclick: this._onDoubleClick.bind(this)
        };

        eventManager.on(events, ref);
      }

      this._events = events;
    }
  }, {
    key: '_onScroll',
    value: function _onScroll(evt) {
      if (this.props.captureScroll) {
        evt.stopPropagation();
      }
    }
  }, {
    key: '_onDrag',
    value: function _onDrag(evt) {
      if (this.props.captureDrag) {
        evt.stopPropagation();
      }
    }
  }, {
    key: '_onClick',
    value: function _onClick(evt) {
      if (this.props.captureClick) {
        evt.stopPropagation();
      }
    }
  }, {
    key: '_onDoubleClick',
    value: function _onDoubleClick(evt) {
      if (this.props.captureDoubleClick) {
        evt.stopPropagation();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      return null;
    }
  }]);

  return BaseControl;
}(Component);

export default BaseControl;


BaseControl.propTypes = propTypes;
BaseControl.defaultProps = defaultProps;
BaseControl.contextTypes = contextTypes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21wb25lbnRzL2Jhc2UtY29udHJvbC5qcyJdLCJuYW1lcyI6WyJDb21wb25lbnQiLCJQcm9wVHlwZXMiLCJXZWJNZXJjYXRvclZpZXdwb3J0IiwicHJvcFR5cGVzIiwiY2FwdHVyZVNjcm9sbCIsImJvb2wiLCJjYXB0dXJlRHJhZyIsImNhcHR1cmVDbGljayIsImNhcHR1cmVEb3VibGVDbGljayIsImRlZmF1bHRQcm9wcyIsImNvbnRleHRUeXBlcyIsInZpZXdwb3J0IiwiaW5zdGFuY2VPZiIsImlzRHJhZ2dpbmciLCJldmVudE1hbmFnZXIiLCJvYmplY3QiLCJCYXNlQ29udHJvbCIsInByb3BzIiwiX2V2ZW50cyIsIl9vbkNvbnRhaW5lckxvYWQiLCJiaW5kIiwicmVmIiwiY29udGV4dCIsImV2ZW50cyIsIm9mZiIsIndoZWVsIiwiX29uU2Nyb2xsIiwicGFuc3RhcnQiLCJfb25EcmFnIiwiY2xpY2siLCJfb25DbGljayIsImRibGNsaWNrIiwiX29uRG91YmxlQ2xpY2siLCJvbiIsImV2dCIsInN0b3BQcm9wYWdhdGlvbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVFBLFNBQVIsUUFBd0IsT0FBeEI7QUFDQSxPQUFPQyxTQUFQLE1BQXNCLFlBQXRCO0FBQ0EsT0FBT0MsbUJBQVAsTUFBZ0MsMkJBQWhDOztBQUVBLElBQU1DLFlBQVk7QUFDaEI7QUFDQUMsaUJBQWVILFVBQVVJLElBRlQ7QUFHaEI7QUFDQUMsZUFBYUwsVUFBVUksSUFKUDtBQUtoQjtBQUNBRSxnQkFBY04sVUFBVUksSUFOUjtBQU9oQjtBQUNBRyxzQkFBb0JQLFVBQVVJO0FBUmQsQ0FBbEI7O0FBV0EsSUFBTUksZUFBZTtBQUNuQkwsaUJBQWUsS0FESTtBQUVuQkUsZUFBYSxJQUZNO0FBR25CQyxnQkFBYyxJQUhLO0FBSW5CQyxzQkFBb0I7QUFKRCxDQUFyQjs7QUFPQSxJQUFNRSxlQUFlO0FBQ25CQyxZQUFVVixVQUFVVyxVQUFWLENBQXFCVixtQkFBckIsQ0FEUztBQUVuQlcsY0FBWVosVUFBVUksSUFGSDtBQUduQlMsZ0JBQWNiLFVBQVVjO0FBSEwsQ0FBckI7O0FBTUE7Ozs7Ozs7O0lBT3FCQyxXOzs7QUFFbkIsdUJBQVlDLEtBQVosRUFBbUI7QUFBQTs7QUFBQSwwSEFDWEEsS0FEVzs7QUFHakIsVUFBS0MsT0FBTCxHQUFlLElBQWY7O0FBRUEsVUFBS0MsZ0JBQUwsR0FBd0IsTUFBS0EsZ0JBQUwsQ0FBc0JDLElBQXRCLE9BQXhCO0FBTGlCO0FBTWxCOzs7O3FDQUVnQkMsRyxFQUFLO0FBQUEsVUFDYlAsWUFEYSxHQUNHLEtBQUtRLE9BRFIsQ0FDYlIsWUFEYTs7QUFHcEI7O0FBQ0EsVUFBSSxDQUFDQSxZQUFMLEVBQW1CO0FBQ2pCO0FBQ0Q7O0FBRUQsVUFBSVMsU0FBUyxLQUFLTCxPQUFsQjs7QUFFQTtBQUNBLFVBQUlLLE1BQUosRUFBWTtBQUNWVCxxQkFBYVUsR0FBYixDQUFpQkQsTUFBakI7QUFDQUEsaUJBQVMsSUFBVDtBQUNEOztBQUVELFVBQUlGLEdBQUosRUFBUztBQUNQO0FBQ0FFLGlCQUFTO0FBQ1BFLGlCQUFPLEtBQUtDLFNBQUwsQ0FBZU4sSUFBZixDQUFvQixJQUFwQixDQURBO0FBRVBPLG9CQUFVLEtBQUtDLE9BQUwsQ0FBYVIsSUFBYixDQUFrQixJQUFsQixDQUZIO0FBR1BTLGlCQUFPLEtBQUtDLFFBQUwsQ0FBY1YsSUFBZCxDQUFtQixJQUFuQixDQUhBO0FBSVBXLG9CQUFVLEtBQUtDLGNBQUwsQ0FBb0JaLElBQXBCLENBQXlCLElBQXpCO0FBSkgsU0FBVDs7QUFPQU4scUJBQWFtQixFQUFiLENBQWdCVixNQUFoQixFQUF3QkYsR0FBeEI7QUFDRDs7QUFFRCxXQUFLSCxPQUFMLEdBQWVLLE1BQWY7QUFDRDs7OzhCQUVTVyxHLEVBQUs7QUFDYixVQUFJLEtBQUtqQixLQUFMLENBQVdiLGFBQWYsRUFBOEI7QUFDNUI4QixZQUFJQyxlQUFKO0FBQ0Q7QUFDRjs7OzRCQUVPRCxHLEVBQUs7QUFDWCxVQUFJLEtBQUtqQixLQUFMLENBQVdYLFdBQWYsRUFBNEI7QUFDMUI0QixZQUFJQyxlQUFKO0FBQ0Q7QUFDRjs7OzZCQUVRRCxHLEVBQUs7QUFDWixVQUFJLEtBQUtqQixLQUFMLENBQVdWLFlBQWYsRUFBNkI7QUFDM0IyQixZQUFJQyxlQUFKO0FBQ0Q7QUFDRjs7O21DQUVjRCxHLEVBQUs7QUFDbEIsVUFBSSxLQUFLakIsS0FBTCxDQUFXVCxrQkFBZixFQUFtQztBQUNqQzBCLFlBQUlDLGVBQUo7QUFDRDtBQUNGOzs7NkJBRVE7QUFDUCxhQUFPLElBQVA7QUFDRDs7OztFQW5Fc0NuQyxTOztlQUFwQmdCLFc7OztBQXVFckJBLFlBQVliLFNBQVosR0FBd0JBLFNBQXhCO0FBQ0FhLFlBQVlQLFlBQVosR0FBMkJBLFlBQTNCO0FBQ0FPLFlBQVlOLFlBQVosR0FBMkJBLFlBQTNCIiwiZmlsZSI6ImJhc2UtY29udHJvbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgMjAxNSBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG5pbXBvcnQge0NvbXBvbmVudH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBXZWJNZXJjYXRvclZpZXdwb3J0IGZyb20gJ3ZpZXdwb3J0LW1lcmNhdG9yLXByb2plY3QnO1xuXG5jb25zdCBwcm9wVHlwZXMgPSB7XG4gIC8qKiBFdmVudCBoYW5kbGluZyAqL1xuICBjYXB0dXJlU2Nyb2xsOiBQcm9wVHlwZXMuYm9vbCxcbiAgLy8gU3RvcCBtYXAgcGFuICYgcm90YXRlXG4gIGNhcHR1cmVEcmFnOiBQcm9wVHlwZXMuYm9vbCxcbiAgLy8gU3RvcCBtYXAgY2xpY2tcbiAgY2FwdHVyZUNsaWNrOiBQcm9wVHlwZXMuYm9vbCxcbiAgLy8gU3RvcCBtYXAgZG91YmxlIGNsaWNrXG4gIGNhcHR1cmVEb3VibGVDbGljazogUHJvcFR5cGVzLmJvb2xcbn07XG5cbmNvbnN0IGRlZmF1bHRQcm9wcyA9IHtcbiAgY2FwdHVyZVNjcm9sbDogZmFsc2UsXG4gIGNhcHR1cmVEcmFnOiB0cnVlLFxuICBjYXB0dXJlQ2xpY2s6IHRydWUsXG4gIGNhcHR1cmVEb3VibGVDbGljazogdHJ1ZVxufTtcblxuY29uc3QgY29udGV4dFR5cGVzID0ge1xuICB2aWV3cG9ydDogUHJvcFR5cGVzLmluc3RhbmNlT2YoV2ViTWVyY2F0b3JWaWV3cG9ydCksXG4gIGlzRHJhZ2dpbmc6IFByb3BUeXBlcy5ib29sLFxuICBldmVudE1hbmFnZXI6IFByb3BUeXBlcy5vYmplY3Rcbn07XG5cbi8qXG4gKiBQdXJlQ29tcG9uZW50IGRvZXNuJ3QgdXBkYXRlIHdoZW4gY29udGV4dCBjaGFuZ2VzLlxuICogVGhlIG9ubHkgd2F5IGlzIHRvIGltcGxlbWVudCBvdXIgb3duIHNob3VsZENvbXBvbmVudFVwZGF0ZSBoZXJlLiBDb25zaWRlcmluZ1xuICogdGhlIHBhcmVudCBjb21wb25lbnQgKFN0YXRpY01hcCBvciBJbnRlcmFjdGl2ZU1hcCkgaXMgcHVyZSwgYW5kIG1hcCByZS1yZW5kZXJcbiAqIGlzIGFsbW9zdCBhbHdheXMgdHJpZ2dlcmVkIGJ5IGEgdmlld3BvcnQgY2hhbmdlLCB3ZSBhbG1vc3QgZGVmaW5pdGVseSBuZWVkIHRvXG4gKiByZWNhbGN1bGF0ZSB0aGUgbWFya2VyJ3MgcG9zaXRpb24gd2hlbiB0aGUgcGFyZW50IHJlLXJlbmRlcnMuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJhc2VDb250cm9sIGV4dGVuZHMgQ29tcG9uZW50IHtcblxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcblxuICAgIHRoaXMuX2V2ZW50cyA9IG51bGw7XG5cbiAgICB0aGlzLl9vbkNvbnRhaW5lckxvYWQgPSB0aGlzLl9vbkNvbnRhaW5lckxvYWQuYmluZCh0aGlzKTtcbiAgfVxuXG4gIF9vbkNvbnRhaW5lckxvYWQocmVmKSB7XG4gICAgY29uc3Qge2V2ZW50TWFuYWdlcn0gPSB0aGlzLmNvbnRleHQ7XG5cbiAgICAvLyBSZXR1cm4gZWFybHkgaWYgbm8gZXZlbnRNYW5hZ2VyIGlzIGZvdW5kXG4gICAgaWYgKCFldmVudE1hbmFnZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuXG4gICAgLy8gUmVtb3ZlIGFsbCBwcmV2aW91c2x5IHJlZ2lzdGVyZWQgZXZlbnRzXG4gICAgaWYgKGV2ZW50cykge1xuICAgICAgZXZlbnRNYW5hZ2VyLm9mZihldmVudHMpO1xuICAgICAgZXZlbnRzID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAocmVmKSB7XG4gICAgICAvLyBjb250YWluZXIgaXMgbW91bnRlZDogcmVnaXN0ZXIgZXZlbnRzIGZvciB0aGlzIGVsZW1lbnRcbiAgICAgIGV2ZW50cyA9IHtcbiAgICAgICAgd2hlZWw6IHRoaXMuX29uU2Nyb2xsLmJpbmQodGhpcyksXG4gICAgICAgIHBhbnN0YXJ0OiB0aGlzLl9vbkRyYWcuYmluZCh0aGlzKSxcbiAgICAgICAgY2xpY2s6IHRoaXMuX29uQ2xpY2suYmluZCh0aGlzKSxcbiAgICAgICAgZGJsY2xpY2s6IHRoaXMuX29uRG91YmxlQ2xpY2suYmluZCh0aGlzKVxuICAgICAgfTtcblxuICAgICAgZXZlbnRNYW5hZ2VyLm9uKGV2ZW50cywgcmVmKTtcbiAgICB9XG5cbiAgICB0aGlzLl9ldmVudHMgPSBldmVudHM7XG4gIH1cblxuICBfb25TY3JvbGwoZXZ0KSB7XG4gICAgaWYgKHRoaXMucHJvcHMuY2FwdHVyZVNjcm9sbCkge1xuICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH1cbiAgfVxuXG4gIF9vbkRyYWcoZXZ0KSB7XG4gICAgaWYgKHRoaXMucHJvcHMuY2FwdHVyZURyYWcpIHtcbiAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9XG4gIH1cblxuICBfb25DbGljayhldnQpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5jYXB0dXJlQ2xpY2spIHtcbiAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9XG4gIH1cblxuICBfb25Eb3VibGVDbGljayhldnQpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5jYXB0dXJlRG91YmxlQ2xpY2spIHtcbiAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxufVxuXG5CYXNlQ29udHJvbC5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5CYXNlQ29udHJvbC5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5CYXNlQ29udHJvbC5jb250ZXh0VHlwZXMgPSBjb250ZXh0VHlwZXM7XG4iXX0=